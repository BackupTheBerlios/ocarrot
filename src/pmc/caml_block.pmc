/*
=head1 Base class for OCarrot blocks

=head2 Description

This PMC is the base class for OCaml blocks.

=head3 Overloaded Methods

=over 4

=cut

*/

#include "ocarrot.h"

pmclass caml_block
    extends caml_value
    auto_attrs
    need_ext
    dynpmc
    group ocarrot_group
    hll ocarrot {

      ATTR INTVAL tag;
      ATTR void *aggregate;
/*

=back

=cut

*/
      VTABLE void init() {
        PObj_custom_mark_destroy_SETALL(SELF);

        PObj_get_FLAGS(SELF) |= OCarrot_Value_is_boxed;
        SET_ATTR_iv(INTERP, SELF, 0);
        SET_ATTR_tag(INTERP, SELF, 0);
        SET_ATTR_aggregate(INTERP, SELF, NULL);
      }

      VTABLE void set_integer_native (INTVAL new_size) {
          Parrot_ex_throw_from_c_args(INTERP, NULL, 1,
                  "Too late to set the size of caml_block");
      }

      VTABLE void mark() {
        INTVAL tag;
        GET_ATTR_tag(INTERP, SELF, tag);
        if(tag < No_scan_tag) {
          INTVAL size;
          INTVAL i;
          PMC **aggregate;
          void *void_aggregate;

          GET_ATTR_iv(INTERP, SELF, size);
          GET_ATTR_aggregate(INTERP, SELF, void_aggregate);
          aggregate = (PMC **)void_aggregate;

          for(i = 0; i < size; i++) {
            Parrot_gc_mark_PObj_alive(INTERP, (PObj *)aggregate[i]);
          }
        }
      }

      VTABLE void destroy() {
        void *aggregate;
        GET_ATTR_aggregate(INTERP, SELF, aggregate);

        if(aggregate) {
          mem_sys_free(aggregate);
        }

        SUPER();
      }

      VTABLE PMC *get_pmc_keyed_int(INTVAL index) {
          void *aggregate;
          GET_ATTR_aggregate(INTERP, SELF, aggregate);

          if(aggregate) {
              return ((PMC **)aggregate)[index];
          }

          return PMCNULL;
      }

      METHOD tag(INTVAL new_tag :optional, int got_new_tag :opt_flag) {
          if(got_new_tag) {
            SET_ATTR_tag(INTERP, SELF, new_tag);
          }
          else {
            INTVAL tag;
            GET_ATTR_tag(INTERP, SELF, tag);
            RETURN(INTVAL tag);
          }
      }
}

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */

