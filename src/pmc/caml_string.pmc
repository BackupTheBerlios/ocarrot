/*
=head1 String data type for OCarrot.

=head2 Description

This PMC stores OCarrot values of type C<string>.

=head3 Overloaded Methods

=over 4

=cut

*/

#include "ocarrot.h"

pmclass caml_string
    extends caml_block
    auto_attrs
    dynpmc
    group ocarrot_group
    hll ocarrot {

/*

=back

=cut

*/

      VTABLE void init() {
        SUPER();

        SET_ATTR_tag(INTERP, SELF, String_tag);
      }

      VTABLE void set_string_native(STRING *value) {
        SET_ATTR_aggregate(INTERP, SELF, value);
        SET_ATTR_iv(INTERP, SELF, ocarrot_words(PTR_SIZE));
      }

      VTABLE STRING *get_string() {
        void *aggregate;
        GET_ATTR_aggregate(INTERP, SELF, aggregate);
        return (STRING *)aggregate;
      }

      VTABLE INTVAL is_equal(PMC *other) {
        INTVAL other_tag;

        GET_ATTR_tag(INTERP, SELF, other_tag);
        if(other_tag == String_tag) {
          void *self_data, *other_data;

          GET_ATTR_aggregate(INTERP, SELF, self_data);
          GET_ATTR_aggregate(INTERP, other, other_data);

          return Parrot_str_equal(INTERP, (STRING *)self_data, (STRING
                *)other_data);
        }
        else {
          return SUPER(other);
        }
      }

      VTABLE void destroy() {
        /* Just call caml_value's destroy vtable, since we don't want
         * caml_block to free the string (the GC will take care of
         * that). */
        Parrot_caml_value_get_vtable(INTERP)->destroy(INTERP, SELF);
      }

      VTABLE void mark() {
          void *aggregate;
          GET_ATTR_aggregate(INTERP, SELF, aggregate);

          if(aggregate) {
              Parrot_gc_mark_PObj_alive(INTERP, (PObj *)aggregate);
          }
      }
}

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */

