/*
=head1 Base class for OCarrot data

=head2 Description

This PMC is the base class for all values of OCaml.

=head3 Overloaded Methods

=over 4

=cut

*/

#include "ocarrot.h"

pmclass caml_value
    dynpmc
    group ocarrot_group
    hll ocarrot
    extends Integer {

/*

=back

=cut

*/
      VTABLE void init() {
        Parrot_caml_value_attributes *attrs =
          mem_allocate_typed(Parrot_caml_value_attributes);
        PMC_data(SELF) = attrs;

        PObj_active_destroy_SET(SELF);

        SET_ATTR_iv(INTERP, SELF, 0);
      }

      VTABLE INTVAL is_equal(PMC *other) {
        INTVAL self_boxed = PObj_get_FLAGS(SELF) & OCarrot_Value_is_boxed;
        INTVAL other_boxed = PObj_get_FLAGS(other) & OCarrot_Value_is_boxed;

        if(self_boxed && other_boxed) {
          INTVAL self_size, other_size, self_tag, other_tag;
          void *self_aggregate, *other_aggregate;

          GET_ATTR_iv(INTERP, SELF, self_size);
          GET_ATTR_iv(INTERP, other, other_size);

          if(self_size != other_size) {
            return 0;
          }

          GETATTR_caml_block_tag(INTERP, SELF, self_tag);
          GETATTR_caml_block_tag(INTERP, other, other_tag);

          if(self_tag != other_tag) {
            return 0;
          }

          GETATTR_caml_block_aggregate(INTERP, SELF, self_aggregate);
          GETATTR_caml_block_aggregate(INTERP, other, other_aggregate);

          if(self_tag < No_scan_tag) {
            /* Recursively test equality on remaining PMCs */
            INTVAL i;

            for(i = 0; i < self_size; i++) {
              INTVAL res;
              res = VTABLE_is_equal(INTERP, ((PMC **)self_aggregate)[i],
                  ((PMC **)other_aggregate)[i]);
              if(!res) {
                return 0;
              }
            }

            return 1;
          }
          else {
            /* Only check physical equality over the aggregate */
            INTVAL i;

            for(i = 0; i < self_size; i++) {
              if(((void **)self_aggregate)[i] !=
                  ((void **)other_aggregate)[i]) {
                return 0;
              }
            }

            return 1;
          }
        }
        else if(!self_boxed && !other_boxed) {
          INTVAL self_value, other_value;

          GET_ATTR_iv(INTERP, SELF, self_value);
          GET_ATTR_iv(INTERP, other, other_value);

          return (self_value == other_value);
        }
        else {
          return 0;
        }
      }

      METHOD is_boxed() {
        INTVAL res = PObj_get_FLAGS(SELF) & OCarrot_Value_is_boxed;
        RETURN(INTVAL res);
      }

}

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
